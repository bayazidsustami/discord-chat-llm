name: Deploy to Server

on:
  push:
    branches: [ main ]  

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Install SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key.pem
          chmod 600 ~/.ssh/deploy_key.pem
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        
      - name: Install rsync
        run: |
          echo "Installing rsync..."
          sudo apt-get update
          sudo apt-get install -y rsync
          rsync --version
        
      - name: Check server connection and rsync availability
        run: |
          ssh -i ~/.ssh/deploy_key.pem ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "echo 'SSH connection successful' && command -v rsync || echo 'rsync not available on remote server'"
      
      - name: Deploy to server
        run: |
          echo "Starting deployment..."
          if rsync -avz -e "ssh -i ~/.ssh/deploy_key.pem" --exclude '.git' --exclude '.github' ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ secrets.SERVER_PATH }}; then
            echo "Rsync completed successfully"
          else
            echo "Rsync failed, using alternative approach with tar..."
            
            tar --exclude='.git' --exclude='.github' -czf /tmp/deploy.tar.gz .
            
            scp -i ~/.ssh/deploy_key.pem /tmp/deploy.tar.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
            
            ssh -i ~/.ssh/deploy_key.pem ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "cd ${{ secrets.SERVER_PATH }} && tar -xzf /tmp/deploy.tar.gz && rm /tmp/deploy.tar.gz"
            echo "Alternative deployment completed"
          fi
          
          echo "Checking sudo permissions..."
          ssh -i ~/.ssh/deploy_key.pem ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "sudo -n true && echo 'Sudo access available without password' || echo 'Sudo requires password, please update sudoers file'"
          
          echo "Restarting service..."
          ssh -i ~/.ssh/deploy_key.pem ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "sudo systemctl restart discordllm.service || echo 'Failed to restart service'"
        
      - name: Verify service status
        run: |
          ssh -i ~/.ssh/deploy_key.pem ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "sudo systemctl status discordllm.service || echo 'Service status check failed'"
          
      - name: Clean up SSH key
        run: rm ~/.ssh/deploy_key.pem
        if: always()